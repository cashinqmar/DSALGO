#include <bits/stdc++.h>
using namespace std;

int size = 0;
int counts = 0;
int val = -1;
void dfs(vector<vector<int>> &graph, int src, unordered_set<int> &s, vector<int> &visited)
{
    if (s.find(src) != s.end())
    {
        val = src;
        counts++;
    }
    size++;

    visited[src] = 1;

    for (int i = 0; i < graph[src].size(); i++)
    {
        if (graph[src][i] == 1 && visited[i] == -1)
        {
            dfs(graph, i, s, visited);
        }
    }
}
int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
{

    unordered_set<int> s;
    int minm = INT_MAX;
    for (int i = 0; i < initial.size(); i++)
    {
        s.insert(initial[i]);
        minm = min(initial[i], minm);
    }

    vector<int> visited(graph.size(), -1);

    bool count1 = false;
    int ans;
    int maxm = INT_MIN;

    for (int i = 0; i < graph.size(); i++)
    {

        size = 0;
        counts = 0;
        val = -1;
        if (visited[i] == -1)
        {
            dfs(graph, i, s, visited);

            if (counts == 1)
            {

                if (maxm < size)
                {
                    maxm = size;
                    ans = val;
                }
                else if (maxm == size && val < ans)
                {
                    ans = val;
                }
                count1 = true;
            }
        }
    }

    if (count1)
    {
        return ans;
    }

    return minm;
}
int main()
{
}